PDefs.   Program ::= [Def] ;

DFun.    Def    ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DUsing.  Def    ::= "using" QualConst ";" ;

terminator Def "" ;

ADecl.   Arg    ::= Type Id ;
ATemp.   Arg    ::= "const" Type Id ;

separator Arg "," ;

SExp.        Stm ::= Exp ";" ;
SDecls.      Stm ::= Type [Id] ";" ;
STemp.       Stm ::= Id "<" Type ">" Exp ";" ;
SInit.       Stm ::= Type Id "=" Exp ";" ;
SReturn.     Stm ::= "return" Exp ";" ;
SReturnVoid. Stm ::= "return" ";" ;
SWhile.      Stm ::= "while" "(" Exp ")" Stm ;
SBlock.      Stm ::= "{" [Stm] "}" ;
SIfElse.     Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SIf.         Stm ::= "if" "(" Exp ")" Stm ;
SType.       Stm ::= "typedef" Type Id ";" ;


terminator Stm "" ;


EQConst.    Exp15 ::= QualConst ;
EConstDef.  QualConst ::= [Name] ;
EName.      Name ::= Id ;
ETemplate.  Name ::= Name "<" Type ">" ;
ETemplate2. Name ::= Name "&" ;
separator nonempty Name "::" ;


ETrue.   Exp15  ::= "true" ;
EFalse.  Exp15  ::= "false" ;
EInt.    Exp15  ::= Integer ;
EDouble. Exp15  ::= Double ;
EString. Exp15  ::= [String] ;
separator nonempty String "" ;


EApp.    Exp15  ::= Id "(" [Exp] ")" ;
EIndex.  Exp15  ::= Exp15 "[" Exp "]" ;
EDot.    Exp14  ::= Exp14 "." Exp15 ;

EPIncr.  Exp14  ::= Exp15 "++" ;
EPDecr.  Exp14  ::= Exp15 "--" ;

EIncr.   Exp13  ::= "++" Exp14 ;
EDecr.   Exp13  ::= "--" Exp14 ;


ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;
EMod.    Exp12  ::= Exp12 "%"  Exp13 ;
EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;
ELeft.   Exp10  ::= Exp10 "<<" Exp11 ;
ERight.  Exp10  ::= Exp10 ">>" Exp11 ;
ELt.     Exp9   ::= Exp9  "<"  Exp10 ;
EGt.     Exp9   ::= Exp9  ">"  Exp10 ;
ELtEq.   Exp9   ::= Exp9  "<=" Exp10 ;
EGtEq.   Exp9   ::= Exp9  ">=" Exp10 ;
EEq.     Exp8   ::= Exp8  "==" Exp9 ;
ENEq.    Exp8   ::= Exp8  "!=" Exp9 ;
EAnd.    Exp4   ::= Exp4  "&&" Exp5 ;
EOr.     Exp3   ::= Exp3  "||" Exp4 ;
EAss.    Exp2   ::= Exp3 "=" Exp2 ;
ECond.   Exp2   ::= Exp3 "?" Exp2 ":" Exp2 ;
EThrow.  Exp1   ::= "throw" Exp1 ;



internal ETyped. Exp15 ::= "(" Exp ":" Type ")" ;

coercions Exp 15 ;

separator Exp "," ;

rules Type   ::= "bool" | "int" | "double" | "void" ;
TypeQualConst.  Type ::= QualConst ;



token Id (letter (letter | digit | '_')*) ;

separator nonempty Id "," ;

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
